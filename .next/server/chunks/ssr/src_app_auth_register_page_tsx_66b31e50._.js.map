{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jsduq/Documents/pruebas/TaskTone/src/app/auth/register/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport Link from 'next/link'\n\nexport default function RegisterPage() {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    name: '',\n    role: 'USER' as 'USER' | 'WORKER',\n    paypalEmail: '',\n  })\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState('')\n  const router = useRouter()\n  const searchParams = useSearchParams()\n\n  useEffect(() => {\n    const roleParam = searchParams.get('role')\n    if (roleParam === 'worker') {\n      setFormData(prev => ({ ...prev, role: 'WORKER' }))\n    }\n  }, [searchParams])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError('')\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match')\n      setIsLoading(false)\n      return\n    }\n\n    if (formData.role === 'WORKER' && !formData.paypalEmail) {\n      setError('PayPal email is required for workers')\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          name: formData.name,\n          role: formData.role,\n          paypalEmail: formData.role === 'WORKER' ? formData.paypalEmail : null,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        // Redirect based on user role\n        if (data.user.role === 'WORKER') {\n          router.push('/worker/dashboard')\n        } else {\n          router.push('/user/dashboard')\n        }\n      } else {\n        setError(data.error || 'Registration failed')\n      }\n    } catch (error) {\n      setError('An error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Create your TaskTone account\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Or{' '}\n            <Link href=\"/auth/login\" className=\"font-medium text-primary-600 hover:text-primary-500\">\n              sign in to your existing account\n            </Link>\n          </p>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md\">\n              {error}\n            </div>\n          )}\n          \n          {/* Role Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              I want to:\n            </label>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <button\n                type=\"button\"\n                onClick={() => setFormData(prev => ({ ...prev, role: 'USER' }))}\n                className={`p-3 border rounded-md text-sm font-medium ${\n                  formData.role === 'USER'\n                    ? 'border-primary-500 bg-primary-50 text-primary-700'\n                    : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'\n                }`}\n              >\n                Upload Audio\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setFormData(prev => ({ ...prev, role: 'WORKER' }))}\n                className={`p-3 border rounded-md text-sm font-medium ${\n                  formData.role === 'WORKER'\n                    ? 'border-primary-500 bg-primary-50 text-primary-700'\n                    : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'\n                }`}\n              >\n                Process Audio\n              </button>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n                Full Name\n              </label>\n              <input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                required\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                placeholder=\"Enter your full name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email Address\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              />\n            </div>\n\n            {formData.role === 'WORKER' && (\n              <div>\n                <label htmlFor=\"paypalEmail\" className=\"block text-sm font-medium text-gray-700\">\n                  PayPal Email (for payments)\n                </label>\n                <input\n                  id=\"paypalEmail\"\n                  name=\"paypalEmail\"\n                  type=\"email\"\n                  required\n                  className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                  placeholder=\"Enter your PayPal email\"\n                  value={formData.paypalEmail}\n                  onChange={(e) => setFormData(prev => ({ ...prev, paypalEmail: e.target.value }))}\n                />\n              </div>\n            )}\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Password\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                required\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                placeholder=\"Create a password\"\n                value={formData.password}\n                onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                Confirm Password\n              </label>\n              <input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                required\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                placeholder=\"Confirm your password\"\n                value={formData.confirmPassword}\n                onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n              />\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50\"\n            >\n              {isLoading ? 'Creating account...' : 'Create account'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}